plugins {
    id "java"
    id "org.springframework.boot" version "2.3.3.RELEASE"
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

repositories {
    mavenCentral()
}

def componentTest = sourceSets.create("componentTest")

configurations[componentTest.implementationConfigurationName].extendsFrom(configurations.testImplementation)
configurations[componentTest.runtimeOnlyConfigurationName].extendsFrom(configurations.testRuntimeOnly)

def componentTestTask = tasks.register("componentTest", Test) {
    it.dependsOn(tasks.named("assemble"))

	it.testClassesDirs = sourceSets.componentTest.output.classesDirs
	it.classpath = sourceSets.componentTest.runtimeClasspath

    it.inputs.files(jar.archiveFile, file("Dockerfile")).withPathSensitivity(PathSensitivity.RELATIVE)
}
tasks.named("check") {
    it.dependsOn(componentTestTask)
}

configurations {
    implementation {
        resolutionStrategy {
            failOnVersionConflict()
        }
    }
}

dependencies {
    implementation(platform("org.springframework.boot:spring-boot-dependencies:2.3.3.RELEASE"))

    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-actuator")

    implementation("io.micrometer:micrometer-registry-prometheus")

    testImplementation("org.junit.jupiter:junit-jupiter:5.6.2")
    testImplementation("org.assertj:assertj-core:3.12.1")

    componentTestImplementation("org.junit.jupiter:junit-jupiter:5.6.2")
    componentTestImplementation("org.assertj:assertj-core:3.12.1")
    componentTestImplementation("org.testcontainers:testcontainers:1.14.3")
    componentTestImplementation("io.rest-assured:rest-assured:4.1.2")
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}
